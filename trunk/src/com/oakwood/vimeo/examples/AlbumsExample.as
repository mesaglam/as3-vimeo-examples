package com.oakwood.vimeo.examples {	import com.oakwood.vimeo.common.BasicVimeoPlayer;	import com.oakwood.vimeo.albums.VimeoAlbumDetails;	import com.oakwood.vimeo.albums.VimeoAlbumService;	import com.oakwood.vimeo.common.VimeoThumbnail;	import com.oakwood.vimeo.common.VimeoVideoDetails;	import flash.display.MovieClip;	import flash.events.MouseEvent;    /**     * Albums Example     *     * A simple example of how to use the VimeoAlbumService     * This example calls a list of the albums from Vimeo, displays their thumbs and      * allows the user to retrieve the details for each album by clicking on it.     * The supported method calls at the moment are just albums.getAll and albums.getVideos     * By looking at the format of the methods in VimeoAlbumService it should be fairly obvious     * how to add more methods      *       *     *	The VimeoAlbumService uses the VimeoRequest class to create the oAuth signed requests      *	needed to communicate with vimeo. The VimeoRequest class keeps the consumer key and secret      *	as well as the user id as static constants.      *	     *	>>>>>>>>>>>>>> You need to enter your details into the VimeoRequest constants <<<<<<<<<<<<<     *	     *	Also, to retrieve the videos in albums for a pro account (commercial content) you need to have created an access token.     *	This is becasue commercial videos have to be private otherwise they contravene the vimeo terms,      *	yet the the community pass has to be switched on in your account settings in order to use albums.     *	     * AT THE MOMENT THERE IS NO WAY TO GET THE DIRECT LINK TO THE VIDEO RETURNED BY THE API	 * SO WE HAVE TO PASTE THE LINK INTO THE DESCRIPTION FIELD OF EACH VIDEO MANUALLY, THEN WE CAN ACCESS IT FROM THAT FIELD     *	     * @author      Jez Becker (jeremy.becker@oakwood-dc.com)	 */    public class AlbumsExample extends MovieClip    {       			private var _albumService:VimeoAlbumService;		private var _currentState:String;		        public function AlbumsExample()        {            init();        }                private function init() : void        {			//create service			_albumService = new VimeoAlbumService();			// listen for load confirmations			_albumService.loadSignal.add(loadSignalReceived);			//load a list of all albums for our user id			_albumService.loadAllAlbums();		}				/*		 * handle loading completes		 */		private function loadSignalReceived(method:String, album:VimeoAlbumDetails = null) : void 		{			_currentState = method;			var thumbs:Vector.<VimeoThumbnail> = new Vector.<VimeoThumbnail>;			switch(method)			{				case VimeoAlbumService.METHOD_ALL_ALBUMS:						/*						 * once the albums have been loaded they are stored as an vector of VimeoAlbumDetails 						 * objects. The details of each album include three thumbnails for the images that						 * represent each album. 						 */									for each(album in _albumService.allAlbums)							thumbs.push(album.thumbnail_small);											createThumbGrid(thumbs);					break;									case VimeoAlbumService.METHOD_LOADBYID:						/** when a  single album has been loaded */						for each(var video:VimeoVideoDetails in album.contents)						{							thumbs.push(video.thumbnail_small);						}											createThumbGrid(thumbs);					break;			}		}				private function createThumbGrid(thumbs:Vector.<VimeoThumbnail>):void		{			var columns:int = 4;						destroyThumbGrid();						//add my new set of thumbs to the page, trigger them to load and add mouse handlers to them			var n:int = thumbs.length;			while(n--)			{				//load image				thumbs[n].loadBitmap();								//layout in grid				thumbs[n].x = 20+ (n % columns) * (thumbs[n].thumbWidth+20);				thumbs[n].y = 20+((Math.floor(n/columns) * thumbs[n].thumbHeight)) + (20 *Math.floor(n/columns));								//add mouse handlers				thumbs[n].addEventListener(MouseEvent.CLICK, thumbClicked);				addChild(thumbs[n]);			}		}		private function destroyThumbGrid() : void 		{			//remove any existing thumbs			var n:int = numChildren;			while(n--)				removeChildAt(n);		}		private function thumbClicked(event : MouseEvent) : void 		{			var thumb:VimeoThumbnail = event.target as VimeoThumbnail; 			switch(_currentState)			{					case(VimeoAlbumService.METHOD_ALL_ALBUMS):						//load a single album by id						_albumService.loadAlbumByID(thumb.id);						break;											case(VimeoAlbumService.METHOD_LOADBYID):						playVideo(thumb.id);						break;			}					}		private function playVideo(url : String) : void 		{			destroyThumbGrid();			var basePlayer:BasicVimeoPlayer = new BasicVimeoPlayer();			addChild( basePlayer);			basePlayer.init(url);		}    }}